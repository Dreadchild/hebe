#!/usr/bin/env php
<?php

define("PATH", dirname(__FILE__));
require dirname(__FILE__) . '/libs/getopts.php';
require dirname(__FILE__) . '/libs/hebe.php';

$app = array_shift($argv);
$command = array_shift($argv);
$arguments = $argv;

$file = 'default';
$home = exec('echo $HOME');

if (!$command) $command = 'help';
switch ($command){
	/*case 'set':
		if (count($arguments) < 2) usage($command);
		$option = array_shift($arguments);
		$value = implode(' ', $arguments);

		$hebe = new Hebe();
		$hebe->config->set($option, $value);
		break;

	case 'get':
		if (count($arguments) < 1) usage($command);
		$option = array_shift($arguments);

		$hebe = new Hebe();
		$value = settype($hebe->config->get($option), 'string');
		Hebe::message("Option `".$option."` is set to `".$value."`");
		break;
	*/

	case 'group':
		if (count($arguments) < 2) usage($command);

		$group_command = array_shift($arguments);

		switch ($group_command){
			case 'add':
				$group_name = strtolower(str_replace('-', '_', array_shift($arguments)));
				$selected = array(
					'arguments' => array(),
					'add-projects' => array(),
					'add-groups' => array(),
					'remove-projects' => array(),
					'remove-groups' => array(),
					'parent' => null,
					'force' => false
				);
				
				$build = 'arguments';
				
				foreach ($arguments as $arg){

					if ($arg == '+projects'){
						$build = 'add-projects';
						continue;
					}

					if ($arg == '+groups'){
						$build = 'add-groups';
						continue;
					}

					if ($arg == '-projects'){
						$build = 'remove-projects';
						continue;
					}

					if ($arg == '-groups'){
						$build = 'remove-groups';
						continue;
					}
					
					if ($arg == '+parent'){
						$build = 'parent';
						continue;
					}

					if ($arg == '+force'){
						$build = 'force';
						continue;
					}

					if (is_array($selected[$build])) $selected[$build][] = $arg;
					else if (is_bool($selected[$build])) $selected[$build] = true;
					else $selected[$build] = $arg;
					
				}
				
				$hebe = new Hebe();
				$hebe->projects->add_group($group_name, $selected);

				break;
			
			default:
				usage($command);
		}

		break;

	case 'project':
		if (count($arguments) < 1) usage($command);
		$project_command = array_shift($arguments);

		switch ($project_command){
			case 'list':
				$selected = array(
					'arguments' => array(),
					'filter' => array(),
					'no_details' => false,
					'no_nodes' => false,
					'no_sources' => false,
					'no_destinations' => false
				);

				$build = 'arguments';

				foreach ($arguments as $arg){
					if ($arg == '+filter'){
						$build = 'filter';
						continue;
					}
					if ($arg == '-nodes'){
						$build = 'no_nodes';
					}
					if ($arg == '-details'){
						$build = 'no_details';
					}
					if ($arg == '-sources'){
						$build = 'no_sources';
					}
					if ($arg == '-destinations'){
						$build = 'no_destinations';
					}

					if (is_array($selected[$build])) $selected[$build][] = $arg;
					else if (is_bool($selected[$build])) $selected[$build] = true;
					else $selected[$build] = $arg;

				}

				$hebe = new Hebe();
				$hebe->projects->list_project($selected);

				break;
			case 'add':	case 'edit':
				if (count($arguments) < 2) usage($command.".".$project_command);
				$project_name = strtolower(preg_replace("/(\s|\-)/", '_', array_shift($arguments)));
				$selected = array(
					'arguments' => array(),
					'add_nodes' => array(),
					'remove_nodes' => array()
				);
				
				$build = 'arguments';
				
				foreach ($arguments as $arg){

					if ($arg == '+node'){
						$build = 'add_nodes';
						continue;
					}

					if ($arg == '-node'){
						$build = 'remove_nodes';
						continue;
					}

					if ($build == 'add_nodes'){
						$node_config = explode(":", $arg);
						if (count($node_config) < 3) usage($command.".".$project_command);
						$arg = $node_config;
					}

					if (is_array($selected[$build])) $selected[$build][] = $arg;
					else if (is_bool($selected[$build])) $selected[$build] = true;
					else $selected[$build] = $arg;
					
				}
				
				$hebe = new Hebe();
				if ($project_command == 'add') $hebe->projects->add_project($project_name, $selected);
				else $hebe->projects->edit_project($project_name, $selected);

				break;

			case 'rename':
				if (count($arguments) < 2) usage($command.".".$project_command);
				$project_name = strtolower(preg_replace("/(\s|\-)/", '_', array_shift($arguments)));
				$project_newname = strtolower(preg_replace("/(\s|\-)/", '_', array_shift($arguments)));
				$selected = array(
					'arguments' => array(),
					'force' => false
				);
				
				$build = 'arguments';
				
				foreach ($arguments as $arg){

					if ($arg == '+force'){
						$build = 'force';
					}

					if (is_array($selected[$build])) $selected[$build][] = $arg;
					else if (is_bool($selected[$build])) $selected[$build] = true;
					else $selected[$build] = $arg;

				}

				$hebe = new Hebe();
				$hebe->projects->rename_project($project_name, $project_newname, $selected);
				break;
			
			case 'remove':
				if (count($arguments) < 1) usage($command.".".$project_command);
				$project_name = strtolower(preg_replace("/(\s|\-)/", '_', array_shift($arguments)));

				$hebe = new Hebe();
				$hebe->projects->remove_project($project_name);
				break;

			default:
				usage($command);
		}
		break;

	case 'link':
		if (count($arguments) < 1) usage($command.".".$project_command);
		$selected = array(
			'arguments' => array(),
			'projects' => array(),
			'force' => false
		);

		$build = 'arguments';

		foreach ($arguments as $arg){

			if ($arg == '+project'){
				$build = 'projects';
				continue;	
			}

			if ($arg == '+force'){
				$build = 'force';
			}

			if (is_array($selected[$build])) $selected[$build][] = $arg;
			else if (is_bool($selected[$build])) $selected[$build] = true;
			else $selected[$build] = $arg;

			$build = 'arguments';


		}

		$hebe = new Hebe();
		$hebe->projects->link_project($selected);
		break;

	case 'version':
		Hebe::message("Hebe v" . Hebe::$version . " - " . Hebe::$author);
		break;

	case 'help': default:
		if ($command == 'help' && count($arguments)) $file = $arguments[0];
		usage($file);
		break;
}

exit;
list($errors, $options, $args) = getopts($arguments);

if (empty($options) || count($argv) == 1) usage('default');

foreach($options as $command => $arg){
	if (!$options[$command]) continue;
	switch ($command){
		case 'set':
			if (!is_array($arg)) usage('default');
			$option = key($arg);
			$value = $arg[$option];

			$hebe = new Hebe();
			$hebe->config->set($option, $value);
			break;

		case 'v':
			Hebe::message("Hebe v" . Hebe::$version . " - " . Hebe::$author);
			new Hebe();
			break;

		case 'h': default:
			if ($arg && $args[0]) $file = $args[0];
			usage($file);
			break;
	}
}

function usage($command = 'default'){
	global $app;

	if (is_array($command)) $command = 'default';
	$dir = dirname(__FILE__);
	$file = $dir."/help/".$command.".txt";

	if (file_exists($file)) Hebe::message(str_replace('%{app}', $app, file_get_contents($file)));
	else Hebe::error("Unable to find the help file `".$file);

	exit(1);
}

/*
$home = exec('echo $HOME');

$packages = YAML::decode_file("$home/.packages.yml");
if (empty($packages)) $packages = array();

switch ($command){
	
	case 'register':

		$folder = array_shift($argv);
		$realpath = realpath($folder);
		
		if (!$realpath){
			Packager::warn("file or directory $folder not found\n");
			exit(1);
		}
		
		$pkg = new Packager($realpath);
		$name = $pkg->get_package_name();
		$path = $pkg->get_package_manifest();
		
		$packages[$name] = $path;
		
		file_put_contents("$home/.packages.yml", YAML::encode($packages));
		
		Packager::warn("the package $name has been registered as $path\n");

	break;
	
	case 'unregister':
	
		$name = array_shift($argv);
		
		if (empty($packages[$name])){
			Packager::warn("there is no package called $name\n");
			break;
		}

		unset($packages[$name]);
	
		file_put_contents("$home/.packages.yml", YAML::encode($packages));
	
		Packager::warn("the package $name has been unregistered\n");
	
	break;
	
	case 'list':
	
		$package_name = array_shift($argv);
	
		if (empty($package_name)){
			foreach ($packages as $name => $path) Packager::warn("$name: $path\n");
		} else {
			if (!empty($packages[$package_name])){
				$package_path = $packages[$package_name];
				$pkg = new Packager($package_path);
				$files = $pkg->get_all_files();
				foreach ($files as $file){
					$file_name = $pkg->get_file_name($file);
					Packager::warn("- $file_name: [" . implode(", ", $pkg->get_file_provides($file)) . "]\n");
				}
			} else {
				Packager::warn("The package $package_name has not been found.\n");
			}
		}
		
	break;
	
	case 'build':

		$selected = array(
			'components' => array(),
			'files' => array(),
			'add-packages' => array(),
			'remove-packages' => array(),
			'blocks' => array(),
			'use-only' => null
		);
		
		$build = 'components';
		
		foreach ($argv as $arg){

			if ($arg == '+packages'){
				$build = 'add-packages';
				continue;
			}
			
			if ($arg == '-blocks'){
				$build = 'blocks';
				continue;
			}
			
			if ($arg == '+use-only'){
				$build = 'use-only';
				if ($selected['use-only'] == null) $selected['use-only'] = array();
				continue;
			}
			
			if ($arg == '-packages'){
				$build = 'remove-packages';
				continue;
			}
			
			if ($arg == '+components'){
				$build = 'components';
				continue;
			}
			
			if ($arg == '+files'){
				$build = 'files';
				continue;
			}

			$selected[$build][] = $arg;
		}
		
		$paths = array();
					
		foreach ($packages as $name => $path){
			if (!$selected['use-only'] || array_contains($selected['use-only'], $name)) $paths[] = $path;
		}
		
		$pkg = new Packager($paths);
		
		foreach ($selected['remove-packages'] as $package_name) $pkg->remove_package($package_name);
		foreach ($selected['add-packages'] as $package_path) $pkg->add_package($package_path);
		
		$re = "/^([^\/]+)\/\*$/";
		$wildcards = array();
		
		$files = $selected['files'];
		$components = $selected['components'];
		$blocks = $selected['blocks'];
		
		foreach ($components as $component){
			preg_match($re, $component, $matches);
			if (!empty($matches)){
				array_erase($components, $component);
				array_include($wildcards, $matches[1]);
			}
		}
		
		foreach ($files as $file){
			preg_match($re, $file, $matches);
			if (!empty($matches)){
				array_erase($files, $file);
				array_include($wildcards, $matches[1]);
			}
		}
		
		$pkg->validate($files, $components, $wildcards);
		
		foreach ($components as $component){
			$file = $pkg->component_to_file($component);
			if ($file) array_include($files, $file);
		}
		
		foreach ($wildcards as $package){
			$all = $pkg->get_all_files($package);
			foreach ($all as $file) array_include($files, $file);
		}
		
		$files = $pkg->complete_files($files);
		
		Packager::warn("Build using: " . implode(', ', $pkg->get_packages()) . "\n");
		
		Packager::warn("Included Files/Components:\n");
		
		foreach ($files as $file){
			$file_name = $pkg->get_file_name($file);
			$file_package = $pkg->get_file_package($file);
			Packager::warn("- $file_package/$file_name: [" . implode(", ", $pkg->get_file_provides($file)) . "]\n");
		}
		
		echo $pkg->build($files, array(), array(), $blocks);
	
	break;
	
	case 'help':
	case '-h':
	case '--help':
		usage(array_shift($argv));
	break;
	
	default:
		usage();
		exit(1);
	
}

function usage($command = ''){
	$dir = dirname(__FILE__);
	if (empty($command) || !file_exists("$dir/help/$command.txt")) $command = 'default';
	echo file_get_contents("$dir/help/$command.txt");
}
*/
?>
